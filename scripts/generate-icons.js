const sharp = require('sharp');
const fs = require('fs').promises;
const path = require('path');

const sizes = [
    72, 96, 128, 144, 152, 192, 384, 512
];

async function generateIcons() {
    const sourceIcon = path.join(__dirname, '../src/assets/icons/favicon.svg');
    const targetDir = path.join(__dirname, '../src/assets/icons');
    
    console.log('üé® G√©n√©ration des ic√¥nes...\n');

    try {
        // Cr√©ation du dossier cible si n√©cessaire
        await fs.mkdir(targetDir, { recursive: true });

        // G√©n√©ration de chaque taille
        for (const size of sizes) {
            const targetPath = path.join(targetDir, `icon-${size}x${size}.png`);
            
            await sharp(sourceIcon)
                .resize(size, size)
                .png({ quality: 90 })
                .toFile(targetPath);
            
            console.log(`‚úì Ic√¥ne ${size}x${size} g√©n√©r√©e`);
        }

        // G√©n√©ration de l'ic√¥ne Apple sp√©ciale
        await sharp(sourceIcon)
            .resize(180, 180)
            .png({ quality: 90 })
            .toFile(path.join(targetDir, 'apple-touch-icon.png'));
        
        console.log('‚úì Ic√¥ne Apple Touch g√©n√©r√©e');

        // G√©n√©ration du favicon.png
        await sharp(sourceIcon)
            .resize(32, 32)
            .png({ quality: 90 })
            .toFile(path.join(targetDir, 'favicon.png'));
        
        console.log('‚úì Favicon.png g√©n√©r√©\n');
        
        console.log('‚ú® Toutes les ic√¥nes ont √©t√© g√©n√©r√©es avec succ√®s !');
    } catch (error) {
        console.error('‚ùå Erreur:', error);
        process.exit(1);
    }
}

generateIcons();
